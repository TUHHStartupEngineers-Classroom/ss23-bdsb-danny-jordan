#---
#title: "Tidyverse"
#author: "Danny Jordan"
#---


# Load libraries
library(tidyverse)
library(readxl)

# Load Bikes Tabel
bikes_tbl      <- read_excel(path = "C:/Users/jorda/OneDrive/Dokumente/GitHub/ss23-bdsb-danny-jordan/00_data/01_bike_sales/01_raw_data/bikes.xlsx")

# Load  Order Lines
orderlines_tbl <- read_excel("C:/Users/jorda/OneDrive/Dokumente/GitHub/ss23-bdsb-danny-jordan/00_data/01_bike_sales/01_raw_data/orderlines.xlsx")

# Load  Bike Shops
bikeshops_tbl  <- read_excel("C:/Users/jorda/OneDrive/Dokumente/GitHub/ss23-bdsb-danny-jordan/00_data/01_bike_sales/01_raw_data/bikeshops.xlsx")


# Chaining commands with the pipe and assigning it to order_items_joined_tbl
bike_orderlines_joined_tbl <- orderlines_tbl %>%
        left_join(bikes_tbl, by = c("product.id" = "bike.id")) %>%
        left_join(bikeshops_tbl, by = c("customer.id" = "bikeshop.id"))
        
        
        

# 5.0 Wrangling Data ----
# All actions are chained with the pipe already. You can perform each step separately and use glimpse() or View() to validate your code. Store the result in a variable at the end of the steps.
bike_orderlines_wrangled_tbl <- bike_orderlines_joined_tbl %>%
  # 5.1 Separate category name
  separate(col    = category,
           into   = c("category.1", "category.2", "category.3"),
           sep    = " - ") %>%

# 5.2 Add the total price (price * quantity) 
# Add a column to a tibble that uses a formula-style calculation of other columns
mutate(total.price = price * quantity) %>%

# 5.3 Optional: Reorganize. Using select to grab or remove unnecessary columns
# 5.3.1 by exact column name
select(-...1, -gender) %>%

# 5.3.2 by a pattern
# You can use the select_helpers to define patterns. 
# Type ?ends_with and click on Select helpers in the documentation
select(-ends_with(".id")) %>%

# 5.3.3 Actually we need the column "order.id". Let's bind it back to the data
bind_cols(bike_orderlines_joined_tbl %>% select(order.id)) %>% 

# 5.3.4 You can reorder the data by selecting the columns in your desired order.
# You can use select_helpers like contains() or everything()
select(order.id, contains("order"), contains("model"), contains("category"),
       price, quantity, total.price,
       everything()) %>%

# 5.4 Rename columns because we actually wanted underscores instead of the dots
# (one at the time vs. multiple at once)
rename(bikeshop = name) %>%
set_names(names(.) %>% str_replace_all("\\.", "_"))






library(lubridate)
# Step 1 - Manipulate
sales_by_year_tbl <- bike_orderlines_wrangled_tbl %>%

# Select columns
select(order_date, total_price) %>%

# Add year column
mutate(year = year(order_date)) %>%

# Grouping by year and summarizing sales
group_by(year) %>% 
summarize(sales = sum(total_price)) %>%

# Optional: Add a column that turns the numbers into a currency format 
# (makes it in the plot optically more appealing)
# mutate(sales_text = scales::dollar(sales)) <- Works for dollar values
mutate(sales_text = scales::dollar(sales, big.mark = ".", 
                                   decimal.mark = ",", 
                                   prefix = "", 
                                   suffix = " €"))

sales_by_year_tbl
## # A tibble: 5 x 3
##    year    sales sales_text  
##   <dbl>    <dbl> <chr>       
## 1  2015  9930282 9.930.282 € 
## 2  2016 10730507 10.730.507 €
## 3  2017 14510291 14.510.291 €
## 4  2018 12241853 12.241.853 €
## 5  2019 15017875 15.017.875 €


# Step 2 - Visualize
sales_by_year_tbl %>%

# Setup canvas with the columns year (x-axis) and sales (y-axis)
ggplot(aes(x = year, y = sales)) +

# Geometries
geom_col(fill = "#2DC6D6") + # Use geom_col for a bar plot
geom_label(aes(label = sales_text)) + # Adding labels to the bars
geom_smooth(method = "lm", se = FALSE) + # Adding a trendline

# Formatting
# scale_y_continuous(labels = scales::dollar) + # Change the y-axis. 
# Again, we have to adjust it for euro values
scale_y_continuous(labels = scales::dollar_format(big.mark = ".", 
                                                  decimal.mark = ",", 
                                                  prefix = "", 
                                                  suffix = " €")) +
labs(
  title    = "Revenue by year",
  subtitle = "Upward Trend",
  x = "", # Override defaults for x and y
  y = "Revenue"
)


# 6.2 Sales by Year and Category ----
# Step 1 - Manipulate
sales_by_year_cat_1_tbl <- bike_orderlines_wrangled_tbl %>%

# Select columns and add a year
select(order_date, total_price, category_1) %>%
mutate(year = year(order_date)) %>%

# Group by and summarize year and main catgegory
group_by(year, category_1) %>%
summarise(sales = sum(total_price)) %>%
ungroup() %>%

# Format $ Text
mutate(sales_text = scales::dollar(sales, big.mark = ".", 
                                   decimal.mark = ",", 
                                   prefix = "", 
                                   suffix = " €"))

sales_by_year_cat_1_tbl  
## # A tibble: 25 x 4
##     year category_1      sales sales_text 
##    <dbl> <chr>           <dbl> <chr>      
##  1  2015 E-Bikes       1599048 1.599.048 €
##  2  2015 Gravel         663025 663.025 €  
##  3  2015 Hybrid / City  502512 502.512 €  
##  4  2015 Mountain      3254289 3.254.289 €
##  5  2015 Road          3911408 3.911.408 €
##  6  2016 E-Bikes       1916469 1.916.469 €
##  7  2016 Gravel         768794 768.794 €  
##  8  2016 Hybrid / City  512346 512.346 €  
##  9  2016 Mountain      3288733 3.288.733 €
## 10  2016 Road          4244165 4.244.165 €
## # … with 15 more rows


# Step 2 - Visualize
sales_by_year_cat_1_tbl %>%

# Set up x, y, fill
ggplot(aes(x = year, y = sales, fill = category_1)) +

# Geometries
geom_col() + # Run up to here to get a stacked bar plot

# Facet
facet_wrap(~ category_1) +

# Formatting
scale_y_continuous(labels = scales::dollar_format(big.mark = ".", 
                                                  decimal.mark = ",", 
                                                  prefix = "", 
                                                  suffix = " €")) +
labs(
  title = "Revenue by year and main category",
  subtitle = "Each product category has an upward trend",
  fill = "Main category" # Changes the legend name
)


# 7.0 Writing Files ----

# 7.1 Excel ----
install.packages("writexl")
library("writexl")
bike_orderlines_wrangled_tbl %>%
  write_xlsx("00_data/01_bike_sales/02_wrangled_data/bike_orderlines.xlsx")

# 7.2 CSV ----
bike_orderlines_wrangled_tbl %>% 
  write_csv("00_data/01_bike_sales/02_wrangled_data/bike_orderlines.csv")

# 7.3 RDS ----
bike_orderlines_wrangled_tbl %>% 
  write_rds("00_data/01_bike_sales/02_wrangled_data/bike_orderlines.rds")
  
  
  
  
# CHALLENGE 1: Analyze sales by state. Split state and city. Find highest revenue state. Update data.

# 1a. Seperate column 'location' into city and state
bike_orderlines_wrangled_tbl_seperate_city_state <- bike_orderlines_wrangled_tbl %>%
  separate(location, into = c("city", "state"), sep = ", ")
  
# 1b. Calculate sales by state
sales_by_state <- bike_orderlines_wrangled_tbl_seperate_city_state %>%
  group_by(state) %>%
  summarise(total_revenue = sum(total_price))
  
  
  
# 1c. Determine state with the highest turnover
highest_revenue_state <- sales_by_state %>%
  arrange(desc(total_revenue)) %>%
  slice(1)

highest_revenue_state


# 1d. Visualize Data
sales_by_state %>%
  ggplot(aes(x = reorder(state, total_revenue), y = total_revenue)) +
  geom_bar(stat = "identity", fill = "#2DC6D6") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = "State", y = "Total Revenue", title = "Sales by State")
  
  
# 2a. Add a 'year' column to the dataset
bike_orderlines_wrangled_tbl_seperate_city_state <- bike_orderlines_wrangled_tbl_seperate_city_state %>%
  mutate(year = year(order_date))

  
# 2b. Calculate sales by state and year
sales_by_state_year <- bike_orderlines_wrangled_tbl_seperate_city_state %>%
  group_by(state, year) %>%
  summarise(total_revenue = sum(total_price))


# 2c. Visualize data
sales_by_state_year %>%
  ggplot(aes(x = year, y = total_revenue)) +
  geom_bar(stat = "identity", fill = "#2DC6D6") +
  facet_wrap(~ state) +
  labs(x = "Year", y = "Total Revenue", title = "Sales by State and Year")
